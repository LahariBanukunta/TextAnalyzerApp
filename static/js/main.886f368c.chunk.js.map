{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","_jsx","className","concat","mode","children","_jsxs","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","text","setText","useState","_Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","handleUpClick","newtext","toUpperCase","showAlert","toLowerCase","handleSenClick","charAt","slice","handleTitleClick","split","map","word","join","handleClClick","handleCopy","document","getElementById","select","navigator","clipboard","writeText","handleSpaces","length","About","mystyle","setmyStyle","btntext","setbtnText","class","toggleStyle","border","defaultProps","aboutText","Alert","alert","role","lower","capitalize","msg","App","setMode","setAlert","message","setTimeout","Router","body","Switch","Route","exact","path","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode"],"mappings":"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","file":"static/js/main.886f368c.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n//import { a } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-a active\" aria-current=\"page\" href=\"\">Home</a>\r\n                        </li>\r\n                        {/*<li className=\"nav-item\">\r\n                            <a className=\"nav-a\" to=\"/about\">{props.aboutText}</a>\r\n    </li>*/}\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button cla\r\n                        ssName=\"btn btn-primary\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutText: 'About'\r\n  };","import React,{ useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        \r\n        let newtext = text.toUpperCase();\r\n        setText(newtext)\r\n        props.showAlert(\"Converted to Uppercase\",\"success\");\r\n    }\r\n    const handleOnChange = (event)=>{\r\n        \r\n        setText(event.target.value);\r\n    }\r\n    \r\n    function TitleCase(str) {\r\n        return str.toLowerCase().split(' ').map(function(word) {\r\n            return word.charAt(0).toUpperCase() + word.slice(1);\r\n        }).join(' ');\r\n\r\n    }\r\n    \r\n    \r\n    \r\n    function handleLowClick() {\r\n\r\n        let newtext = text.toLowerCase();\r\n\r\n        setText(newtext);\r\n        props.showAlert(\"Converted to Lowercase\",\"success\");\r\n    }\r\n    const handleSenClick = ()=>{\r\n        \r\n        let newtext = text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\r\n        setText(newtext)\r\n        props.showAlert(\"Converted to sentence case\",\"success\");\r\n    }\r\n    const handleTitleClick = ()=>{\r\n        \r\n        let newtext = TitleCase(text);\r\n        setText(newtext)\r\n        props.showAlert(\"Converted to Titlecase\",\"success\");\r\n    }\r\n    const handleClClick = ()=>{\r\n        \r\n        let newtext = \"\";\r\n        setText(newtext)\r\n        props.showAlert(\"Text Cleared...!!\",\"success\");\r\n    }\r\n    const handleCopy = ()=>{\r\n      let text = document.getElementById(\"myBox\");\r\n      text.select();\r\n      navigator.clipboard.writeText(text.value);\r\n      props.showAlert(\"Copied to clipboard\",\"success\");\r\n    }\r\n    const handleSpaces= ()=>{\r\n        let newtext = text.split(/[ ]+/);\r\n        setText(newtext.join(\" \"));\r\n        props.showAlert(\"Extra spaces are removed\",\"success\");\r\n      }\r\n    const[text,setText] = useState(\"\");\r\n    return (\r\n        <>\r\n            <div className='container my-3' style = {{color: props.mode==='dark'?'white':'#042743'}}>\r\n                <h2>{props.heading}</h2>\r\n            <div className=\"mb-3\">\r\n                \r\n                <textarea className=\"form-control\" value = {text} onChange={handleOnChange} style ={{backgroundColor: props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'#042743' }} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className='btn btn-primary mx-2' onClick={handleUpClick}>Convert to UpperCase</button>\r\n            <button className='btn btn-primary mx-2' onClick={handleLowClick}>Convert to LowerCase</button>\r\n            <button className='btn btn-primary mx-2' onClick={handleSenClick}>Convert to SentenceCase</button>\r\n            <button className='btn btn-primary mx-2' onClick={handleTitleClick}>Convert to TitleCase</button>\r\n            <button className='btn btn-primary mx-2' onClick={handleClClick}>Clear</button>\r\n            <button className='btn btn-primary mx-2' onClick={handleCopy}>Copy Text</button>\r\n            <button className='btn btn-primary mx-2' onClick={handleSpaces}>Remove Extra Spaces</button>\r\n            </div>\r\n            <div className=\"container  my-3 \" style = {{color: props.mode==='dark'?'white':'#042743'}}>\r\n                <h2>\r\n                    Your Text Summary\r\n                </h2>\r\n                <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n                <p>{0.008 * text.split(\" \").length} minutes to read</p>\r\n                <h2>Preview</h2>\r\n                <p>\r\n                    {text.length>0?text:\"Enter something in the above textbox to preview it here..!!\"}\r\n                </p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function About() {\r\n    const [mystyle,setmyStyle] = useState({\r\n        color: \"black\",\r\n        backgroundColor: \"white\"\r\n    })\r\n    const [btntext,setbtnText] = useState(\"Enable Light Mode\")\r\n\r\n    const toggleStyle = ()=>{\r\n        if(mystyle.color===\"black\"){\r\n            setmyStyle({\r\n                color: \"white\",\r\n            backgroundColor: \"black\",\r\n            border: \"2px solid white\"\r\n            \r\n        })\r\n        setbtnText(\"Enable Light Mode\")\r\n        \r\n    }\r\n        else{\r\n            setmyStyle({\r\n                color: \"black\",\r\n            backgroundColor: \"white\"\r\n            })\r\n            setbtnText(\"Enable Dark  Mode\")\r\n            \r\n        \r\n    }\r\n}\r\n\r\n\r\n    \r\n    return (\r\n        <div className='container' style={mystyle}>\r\n            <h1>About Us</h1>\r\n            <div class=\"accordion\" id=\"accordionExample\">\r\n                <div class=\"accordion-item\" >\r\n                    <h2 class=\"accordion-header\">\r\n                        <button class=\"accordion-button\" type=\"button\" style={mystyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" class=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\">\r\n                        <div class=\"accordion-body\" style={mystyle}>\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"accordion-item\" >\r\n                    <h2 class=\"accordion-header\">\r\n                        <button class=\"accordion-button collapsed\" type=\"button\" style={mystyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" class=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n                        <div class=\"accordion-body\" style={mystyle}>\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"accordion-item\">\r\n                    <h2 class=\"accordion-header\">\r\n                        <button class=\"accordion-button collapsed\" type=\"button\" style={mystyle}  data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" class=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n                        <div class=\"accordion-body\" style={mystyle}>\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        <div className='container'>\r\n            <button onClick = {toggleStyle} type='button' className='btn btn-primary my-3'>{btntext}</button>\r\n            \r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize=(word)=>{\r\n        let lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n   \r\n   props.alert &&  <div>\r\n    <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n  <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n\n} from \"react-router-dom\";\n\n \nfunction App() {\n  const [mode, setMode] = useState('light'); // Whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n      setAlert({\n        msg: message,\n        type: type\n      })\n      setTimeout(() => {\n          setAlert(null);\n      }, 1500);\n  }\n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Dark Mode';\n      // setInterval(() => {\n      //   document.title = 'TextUtils is Amazing Mode';\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = 'Install TextUtils Now';\n      // }, 1500);\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Light Mode';\n    }\n  }\n  return (\n    <>\n    {/* <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\" /> */}\n    {/* <Navbar/> */}\n    <Router>\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n    <Switch>\n    {/* /users --> Component 1\n        /users/home --> Component 2 */}\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n            <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode}/>\n          </Route>\n    </Switch>\n    </div>\n    </Router>\n    </> \n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}